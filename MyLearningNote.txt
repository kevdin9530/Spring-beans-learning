Author: Kevin Hoang Dinh
Learning course: Spring & Hibernate for Beginners (includes Spring Boot) by Chad Darby on Udemy
Hey, this file is my note for learning basic things about Spring. It's mostly for my personal use so it can be confusing for other people. Hope you find it's useful.  



- Core container: Beans (factory for creating/managing beans), SpEL (Spring Expression Language), Core and Context
- Infrastructur: AOP (Aspect-Oriented-Programming),  add function to an object decleratively (like logging, security, transation,....) apply this through a config file or annotation.
- Data Access Layer: for communicating with database(relation db or NoSQL db). Spring provide helper class for JDBC,JMS which reduce 50% of the code. ORM(Object to Relational Mapping) for intergration with Hibernate and JPA. 
- Web Layer: All web related class, home of spring MVC framework. Build WebApp through Spring Core. 
- Test Layer: Unit, Intergration and Mock. Support TTD (Test-Drive-Development), Mock objects and out-of-container testing.

Spring project is a spring modules built-on top of the core spring framework a.k.a choose project and use only thing that u need


Set up: Install Eclipse EE IDE for Web developer, install Apache Cat and create a server in eclipse
Get JAR file from Spring, right click ur java project property->library->classpath and add jar file


////////////////////////////////////////Spring container/////////////////////////////////////////////////////////
Spring can be an object factory and depend on the configuration file/annotation. In this case is Spring Container.
Spring container main functions: 
- Create and manage object (inversion of control)
- Inject objecet's dependencies (Dependency injection)
configuring Spring container has 3 ways: XML config file (legacy but still used by many), java annotation/java source code(modern)

Spring container development process:
- Configurine ur spring beans
- create spring container  (a.k.a ApplicationContext and has specialized implementation like ClassPathXML,AnnotationConfig,GenericWebApplication and so on)
- get beans from container

Practice in package com.luv2code.springdemo

//////////////////////////////////Dependency Injecetion//////////////////////////////////////
its mean that you outsource the construction and injection of your object to an external entity
"dependency" can just be helper object that is needed to perform operation
continue with the practice in package com.luv2code.springdemo 
Coach will has a new function dailyfortunes with a new helper FortuneService and this is a dependency
Most 2 common injections: contrustor and setter

Development procress of construction injection
- define dependecy interface n classes
- create a construction in ur class for injection 
- config dependency injection in spring config file: 
To config dependency injection, in ur bean write <constructor-arg ref="nameOfTheClassDependentOn"/>

Setter injection:
- creater setter method for injection
- configure the dependency injection in Spring config file
For setter injection, insert in ur bean <property name = "GiveName" ref="TheBeansIdOf_Class_you_inject"/>
!!!!OBS!!!! the name you give for your setter in the class should have same name as the config file
example: ur java file has setter method name setDailyWorkOut() then your config setter name is "DailyWorkOut"


Injecting literal value in spring object - development process:
-Create setter method in class for injection
-Config the injection in Spring config file
To inject literal value, insert in ur bean <property name = "GiveName" value="the_value_of_the_class"/>

!!Note to my java file: we don't use Coach interface because we only create certain variable the value injection only belong to the CricketCoach. 

Injecting value from a property file - development process:
- create property file
- load property file in spring config file
- ref value from property file
property file should be has end file as .properties
to load property file in spring config file, write  <context:property-placeholder location="classpath:filename.properties"/>


///////////////////////Beans Scope/////////////////////////////////////////
Scope (refer to lifecycle of a bean) allows you to know:
- How long does the bean live
- How many instance are created
- How is the bean shared in Spring enviroment
Default scope of a bean is singleton:
- Singleton means that it only creates one instance of the bean
- it is cached in in memory
- All request of that bean will return a SHARED ref to the same bean

Addtional spring bean scope: 
- singleton: create a single shared instance of bean
- prototype: create new beans instance for each container request
- request: scoped to an HTTPS web request. Only used for web app (like session checking shopping cart)
- session: scoped to an HTTP web session. Only used for web app
- global-session: scoped to an global HTTP web session. Only used for web app. 
Depend on situation u want to create new instance every request you need to set
scope "prototype" inside the bean. 

The life cycle of a bean:
When a container started -> the bean instantiated -> then dependency is injected->
-> internal spring processing occurs with the bean factory -> option to add your own custom 
initialization method -> The bean is now ready to use and at certain point the container shut down
a.k.a when ur application shut down like context.close() or calling a custom destroy method
before the bean lifecycle end. 

You can add custom code During bean initialization/destruction.
- Calling custom business logic method
- Setting up handle for resources (database, sockets, file etc)
Basically, in a bean life cycle, spring allow you to call some of custom code which we
usually refer as Hook, to execute.To do this just insert 
init-method = "method_name" in ur XML config. 
destroy-method = "method_name"
The method can have any access modifier (private, protected, public)

Return type can be any but the value can't be captured. 
This is quite return type void is commonly used.
Method name can be any
Method should be no-arg. 
 

Development Process: 
- Define init/destroy method
- Config method name in spring config file

!!!!OBS!!!!!! Beware of prototype scope bean. Spring wont call the destroy method
on prototype scope bean. It is possible to do custom destroy method on prototype bean 
but it requires custom coding.


///////////////////////////Spring config with java annotations/////////////////
Java Annotations is special labels/marker added to java classes. Give you 
meta-data about the class. Java anno can process at compile time or 
run-time for special processing.

ex: @Override which tell the compiler we are overriding a method.
and during compilation time, compiler will check/verify the override.
if the override is not compatible it will give compilation error.

XML config can be very verbose for large object 
ex: if you have a spring object with 100 beans, it will take forever to code them.

Instead you can just config spring beans with annontation instead and 
minimize the XML config. 

How spring work with annotation,
basically, when you add annotation to a class, spring will scan java class
for the annotation and automatically register that beans in the spring container.

Using annotation with Spring - Development process:
- Enable component scanning in spring config file
- Add the @Component Annontation in java class
- Retrieve the beans from the spring container.

in spring config file, add <context:component-scan
		base-package="package_path" />
after that, go in the java class you create, you can add
@Component("bean_id") 
by doing this it allow the spring to read java classes as component and add them as beans
in the spring container.

The default bean-id of a component when created is the class name with first letter lower-case
ex: class name "TennisCoach" then the bean-id is "tennisCoach"

Spring dependecy injection with Annotation and autowiring:
Autowiring mean that spring can automatically wire up objects together
Spring will look for a class that matches the property (matches by type: either class or interface)
then spring find the match, it will inject it automically. 

Ex of Autowiring behind the scene in Spring: 
- Inject FortuneService into Coach implementation
- Spring will scan @Component
- Spring will check any one implements FortuneService interface
- If so, let's inject them.    

Autowiring inject types: Constructor-,Setter- and Field Injection

Annotations Constructor Injection - Development Process:
- Define dependency interface n class
- Create a constructor in your class for injection
- Config the dependency injection with @Autowired Annotation

 Spring setter injection with Annotation and autowiring:
 In this case, we inject dependencies by calling a setter method on ur class.
   
 Setter injection - development process:
 - Create setter method in ur class for injection
 - config dependency injection with @Autowired Annotation
 
 

 