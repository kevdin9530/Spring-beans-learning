Author: Kevin Hoang Dinh
Learning course: Spring & Hibernate for Beginners (includes Spring Boot) by Chad Darby on Udemy
Hey, this file is my note for learning basic things about Spring. It's mostly for my personal use so it can be confusing for other people. Hope you find it's useful.  



- Core container: Beans (factory for creating/managing beans), SpEL (Spring Expression Language), Core and Context
- Infrastructur: AOP (Aspect-Oriented-Programming),  add function to an object decleratively (like logging, security, transation,....) apply this through a config file or annotation.
- Data Access Layer: for communicating with database(relation db or NoSQL db). Spring provide helper class for JDBC,JMS which reduce 50% of the code. ORM(Object to Relational Mapping) for intergration with Hibernate and JPA. 
- Web Layer: All web related class, home of spring MVC framework. Build WebApp through Spring Core. 
- Test Layer: Unit, Intergration and Mock. Support TTD (Test-Drive-Development), Mock objects and out-of-container testing.

Spring project is a spring modules built-on top of the core spring framework a.k.a choose project and use only thing that u need


Set up: Install Eclipse EE IDE for Web developer, install Apache Cat and create a server in eclipse
Get JAR file from Spring, right click ur java project property->library->classpath and add jar file


////////////////////////////////////////Spring container/////////////////////////////////////////////////////////
Spring can be an object factory and depend on the configuration file/annotation. In this case is Spring Container.
Spring container main functions: 
- Create and manage object (inversion of control)
- Inject objecet's dependencies (Dependency injection)
configuring Spring container has 3 ways: XML config file (legacy but still used by many), java annotation/java source code(modern)

Spring container development process:
- Configurine ur spring beans
- create spring container  (a.k.a ApplicationContext and has specialized implementation like ClassPathXML,AnnotationConfig,GenericWebApplication and so on)
- get beans from container

Practice in package com.luv2code.springdemo

//////////////////////////////////Dependency Injecetion//////////////////////////////////////
its mean that you outsource the construction and injection of your object to an external entity
"dependency" can just be helper object that is needed to perform operation
continue with the practice in package com.luv2code.springdemo 
Coach will has a new function dailyfortunes with a new helper FortuneService and this is a dependency
Most 2 common injections: contrustor and setter

Development procress of construction injection
- define dependecy interface n classes
- create a construction in ur class for injection 
- config dependency injection in spring config file: 
To config dependency injection, in ur bean write <constructor-arg ref="nameOfTheClassDependentOn"/>

Setter injection:
- creater setter method for injection
- configure the dependency injection in Spring config file
For setter injection, insert in ur bean <property name = "GiveName" ref="TheBeansIdOf_Class_you_inject"/>
!!!!OBS!!!! the name you give for your setter in the class should have same name as the config file
example: ur java file has setter method name setDailyWorkOut() then your config setter name is "DailyWorkOut"


Injecting literal value in spring object - development process:
-Create setter method in class for injection
-Config the injection in Spring config file
To inject literal value, insert in ur bean <property name = "GiveName" value="the_value_of_the_class"/>

!!Note to my java file: we don't use Coach interface because we only create certain variable the value injection only belong to the CricketCoach. 

Injecting value from a property file - development process:
- create property file
- load property file in spring config file
- ref value from property file
property file should be has end file as .properties
to load property file in spring config file, write  <context:property-placeholder location="classpath:filename.properties"/>


///////////////////////Beans Scope/////////////////////////////////////////
Scope (refer to lifecycle of a bean) allows you to know:
- How long does the bean live
- How many instance are created
- How is the bean shared in Spring enviroment
Default scope of a bean is singleton:
- Singleton means that it only creates one instance of the bean
- it is cached in in memory
- All request of that bean will return a SHARED ref to the same bean

Addtional spring bean scope: 
- singleton: create a single shared instance of bean
- prototype: create new beans instance for each container request
- request: scoped to an HTTPS web request. Only used for web app (like session checking shopping cart)
- session: scoped to an HTTP web session. Only used for web app
- global-session: scoped to an global HTTP web session. Only used for web app. 
Depend on situation u want to create new instance every request you need to set
scope "prototype" inside the bean. 

The life cycle of a bean:
When a container started -> the bean instantiated -> then dependency is injected->
-> internal spring processing occurs with the bean factory -> option to add your own custom 
initialization method -> The bean is now ready to use and at certain point the container shut down
a.k.a when ur application shut down like context.close() or calling a custom destroy method
before the bean lifecycle end. 

You can add custom code During bean initialization/destruction.
- Calling custom business logic method
- Setting up handle for resources (database, sockets, file etc)
Basically, in a bean life cycle, spring allow you to call some of custom code which we
usually refer as Hook, to execute.To do this just insert 
init-method = "method_name" in ur XML config. 
destroy-method = "method_name"
The method can have any access modifier (private, protected, public)

Return type can be any but the value can't be captured. 
This is quite return type void is commonly used.
Method name can be any
Method should be no-arg. 
 

Development Process: 
- Define init/destroy method
- Config method name in spring config file

!!!!OBS!!!!!! Beware of prototype scope bean. Spring wont call the destroy method
on prototype scope bean. It is possible to do custom destroy method on prototype bean 
but it requires custom coding.


///////////////////////////Spring config with java annotations/////////////////
Java Annotations is special labels/marker added to java classes. Give you 
meta-data about the class. Java anno can process at compile time or 
run-time for special processing.

ex: @Override which tell the compiler we are overriding a method.
and during compilation time, compiler will check/verify the override.
if the override is not compatible it will give compilation error.

XML config can be very verbose for large object 
ex: if you have a spring object with 100 beans, it will take forever to code them.

Instead you can just config spring beans with annontation instead and 
minimize the XML config. 

How spring work with annotation,
basically, when you add annotation to a class, spring will scan java class
for the annotation and automatically register that beans in the spring container.

Using annotation with Spring - Development process:
- Enable component scanning in spring config file
- Add the @Component Annontation in java class
- Retrieve the beans from the spring container.

in spring config file, add <context:component-scan
		base-package="package_path" />
after that, go in the java class you create, you can add
@Component("bean_id") 
by doing this it allow the spring to read java classes as component and add them as beans
in the spring container.

The default bean-id of a component when created is the class name with first letter lower-case
ex: class name "TennisCoach" then the bean-id is "tennisCoach"

Spring dependecy injection with Annotation and autowiring:
Autowiring mean that spring can automatically wire up objects together
Spring will look for a class that matches the property (matches by type: either class or interface)
then spring find the match, it will inject it automically. 

Ex of Autowiring behind the scene in Spring: 
- Inject FortuneService into Coach implementation
- Spring will scan @Component
- Spring will check any one implements FortuneService interface
- If so, let's inject them.    

Autowiring inject types: Constructor-,Setter- and Field Injection

Annotations Constructor Injection - Development Process:
- Define dependency interface n class
- Create a constructor in your class for injection
- Config the dependency injection with @Autowired Annotation

 Spring setter injection with Annotation and autowiring:
 In this case, we inject dependencies by calling a setter method on ur class.
   
 Setter injection - development process:
 - Create setter method in ur class for injection
 - config dependency injection with @Autowired Annotation
 simply add @Autowired on a setter method
 You can also add dependecy by using any method as long as u add @Autowired
 
 Field Injection with Annotation and Autowired
 In this case, u can inject dependencies by setting field value on ur class directly, even private field
 The process happen behind the scene a.k.a Java Reflection
 Development Process - Field Injection:
 - configure dependency injection with autowired annotation(apply directly to the field n 
 no need for setter method)
 To do this, just set @Autowired on the field that u want to inject dependecy

 When to use which injection:
 - U need to choose a style and consistent with ur project
 
 When using autowiring,
 what will happen if there are many implementation? which one will the spring pick?
 so to do this u can set up a Annotation @Qualifier to be specific which bean-id
 u can add @Qualifier to any type of injection.
 However, using Qualifier in constructor can be tricky becuz u have to give the Annotation
 inside the constructor arg field
 ex: public someCoach(@Qualifier("bean-id" Interface_name name)
 
 !!OBS!!!! about default bean-id. If the class name has 2 uppercase in the beginning
 the default bean-id wont be converted to lower case
 example class name "RESTsomething" then the default bean-id is "RESTsomething", not"rESTsomething"
 
 To read and use data properties file. Add read component in spring config file
 later use the data by using @Value("${data_name}")
 
 Adding beans scope with java Annotation by using @Scope
 default scope will simply singleton 
 To do this just add @Scope("scope_type") before the class 
 
 Beans lifecycle method with Java Annotation - Development Process:
 - define your method for init and destroy
 - Add Annotation @PostConstruct @PreDestroy
 
  !!!!!OBS!!!!! @PreDestroy method doesnt work with prototype scope. So to do this.
  you need 
  - Implement a custombeanprocessor
  - to use interface DisposableBean and implement destroy() method 
  
  ///////////////////Using java config class instead of XML///////////////////////
  This time we are trying another way to configure  a container without using xml file.
  Development Process is:
  - Create java class and add annotation @Configuration
  - Add component scanning support @ComponentScan (optional)
  - Read Spring Java config class
  - Retrieve bean from the container
  
  To use config class, use the class AnnotationConfigApplicationContext
  to get the context of that config class.
  
  Now we define the bean directly in java config code without adding component on every class..
  Development Process:
  - Define method to expose the bean
  - Inject bean dependencies
  - Read Spring java config class
  - Retrieve Bean from Spring container.
  
  The case to use @Bean instead of @Component is when using an outsider class that 
  doesnt belong to the Spring library. By define with @Bean you can use outside
  class without a problem. @Bean annotation is like a wrapper/adapter for third-party classes.
  
  This time we try to inject value from a property files through java code
  Development Process:
  - create property files
  - load property file in spring config
  - references the value in the file
  To load property file, simply add @PropertySource("classpath:name.properties")
  in your config class
  and to use the value, simply use @Value annotation same as above
  
  /////////////////////////////Spring MVC///////////////////////
  
  MVC stand for model view controller. 
  Spring MVC is a framework for building web app in java
  and the framework is based on mvc design pattern.
  and it leverages features of the core spring framework (IoC,DI)
  
 
 A simple model of MVC:
  	Web		->   front controller  -> controller 
  										|
  										v 
  Browser		<------------			view template
  
  basically you get a request from a web browser, it will encounter the front controller
  this person will delegate the request off to a controller code. 
  Controller code is the code that you create that contains ur business logic
  
  Benefits of spring mvc:
  - Its the benefit of building web app UIs in java
  - Leverages a set of reuseable UI component
  - Help manage app state of web request
  - Process form data: validation, conversion
  - Flexible config for view layer.
  
 For more ref to spring mvc
 Go to docs: https://docs.spring.io/spring-framework/docs/current/reference/html/web.html
 
 Components of Spring MVC:
 - A set of web pages to layout UI component
 - A collection of spring beans (controller, services...)
 - Spring config (xml, annotation or java)
Spring MVC work behind the scene:
1. Front controller know as a DispatcherServlet:
- Part of Spring framework
- Already developed by Spring Dev Team
so as a developer u only need to create 
- Model Object: contains data
- View template: ur JSP page, a view page to render data
- Controller Classes: your business/processing logic, 
2. Controller:
- Done by developer
- Contains ur business/processing logic: handle request, store/retrieve data(db,webservice...), place data in model
- Send to approriate view template

3. Model:
- contains ur data
- store/retrieve data via backend systems(db,webservice.../use spring bean maybe)
- Place data in the model (data can be any java object/collection)
4. View template:
Most common view template is JSP (Java server page) and JSTL (JSP standard Tag Library).
- Spring MVC is flexible, has many view template (thymeleaf, groovy, velocity, freemaker...)
- Developer will create a page to display data.
Basically its a jsp page that will provide data to the user

For more detail about the template. 
Go to: https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-view

The hardest part of doing Spring MVC is getting the right configuration
Process:
- Add the following in the config to file WEB-INF/web.xml 
1. configure spring MVC dispatcher servlet
2. set url mapping to spring mvc dispatcher servlet
Add the following to WEB-INF/Spring-mvc-demo-servlet.xml
3. Add support for spring component scanning
4. Add support for conversion, formatting and validation
5. Config spring mvc resolver

In step 1: 
u want to add <servlet> in ur config xml file and give them a name/class and init parameter to locate spring context
name: <servlet-name>
class: <servlet-class> path of class
init: <init-param> (inside init has name <param-name> n value <param-value> which is ur context path)
in Step 2:
basically we need to set up the url
<servlet-mapping>: has name <servlet-name> and <url-pattern> depend on the url pattern
the request will be processed according to the servlet name. 
In step 3:
- simply add <beans> and inside <context:component-scan base-package = "package name">
In step 4:
- simply add <mvc:annotation-drive> inside <beans>. 
In step 5:
- Add a single <bean> and config the bean class. Add <property name ="prefix/suffix" value = "file location"
when you add the prefix / suffix 
it will let u know where to find the file and what type of file it is
the prefix is the path location while suffix is what type of file.

The learning will continue in another github since it will be another project
Continuation: https://github.com/kevdin9530/SpringMVCLearn

 

 
  	
  	
  
  
  